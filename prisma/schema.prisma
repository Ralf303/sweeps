generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id              String  @id @default(uuid())
    nickname        String  @unique
    email           String  @unique
    password        String
    avatar          String  @default("")
    role            String  @default("user")
    balance         Float   @default(0)
    referalBalance  Float   @default(0)
    referralsCount  Int     @default(0)
    referredById    String?
    referralLevel   Int     @default(1)
    dailyLose       Float   @default(0)
    weeklyLose      Float   @default(0)
    monthlyLose     Float   @default(0)
    globalLose      Float   @default(0)
    referralAllLose Float   @default(0)
    isBanned        Boolean @default(false)
    referralCode    String  @unique @default("")
    current_session String?
    refPercentage   Float   @default(0)
    regIp           String?

    referredBy   User?         @relation("UserReferrals", fields: [referredById], references: [id])
    referrals    User[]        @relation("UserReferrals")
    transactions Transaction[]

    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    ChatMessage ChatMessage[]
    Crypto      Crypto[]
    Log         Log[]
}

model Crypto {
    id     Int    @id
    userId String

    currency  String
    amount    Decimal  @db.Decimal(18, 8)
    status    String
    createdAt DateTime @default(now())

    senderAmount   Decimal? @db.Decimal(18, 8)
    senderCurrency String?
    rawData        Json?

    user User @relation(fields: [userId], references: [id])
}

model Transaction {
    id              String   @id @default(uuid())
    transaction_id  String   @unique
    action          String
    amount          Decimal  @default(0) @db.Decimal(18, 8)
    refunded_amount Decimal  @default(0) @db.Decimal(18, 8)
    currency        String
    game_uuid       String?
    round_id        String?
    session_id      String?
    rolled_back     Boolean  @default(false)
    refunded        Boolean  @default(false)
    created_at      DateTime @default(now())

    balanceBefore Decimal? @db.Decimal(18, 8)
    balanceAfter  Decimal? @db.Decimal(18, 8)
    profit        Decimal? @db.Decimal(18, 8)
    gameName      String?
    bet           Decimal? @db.Decimal(18, 8)
    gameAvatarUrl String?  @default("")

    user   User   @relation(fields: [userId], references: [id])
    userId String

    bet_transaction    Transaction?  @relation("BetRefund", fields: [bet_transaction_id], references: [transaction_id])
    bet_transaction_id String?
    refunds            Transaction[] @relation("BetRefund")

    @@index([userId])
    @@index([round_id])
    @@index([game_uuid])
    @@index([created_at])
}

model Banner {
    id          String   @id @default(uuid())
    title       String
    description String
    buttonText  String
    buttonLink  String
    imageUrl    String
    createdAt   DateTime @default(now())
}

model News {
    id          String @id @default(uuid())
    title       String
    description String
    imageUrl    String

    createdAt DateTime @default(now())
}

model faq {
    id          String @id @default(uuid())
    title       String
    description String

    createdAt DateTime @default(now())
}

model ChatMessage {
    id        String   @id @default(uuid())
    userId    String
    text      String
    createdAt DateTime @default(now())
    isPin     Boolean  @default(false)

    user User @relation(fields: [userId], references: [id])
}

model SocialLink {
    id       Int    @id @default(autoincrement())
    platform String
    url      String
    icon     String
}

model CryptoCurrency {
    id        Int      @id @default(autoincrement())
    name      String
    symbol    Int
    createdAt DateTime @default(now())
}

model Log {
    id       String  @id @default(cuid())
    date     String
    amount   String
    previous Decimal @default(0) @db.Decimal(18, 8)
    new      Decimal @db.Decimal(18, 8)
    user     User    @relation(fields: [userId], references: [id])
    userId   String
}
